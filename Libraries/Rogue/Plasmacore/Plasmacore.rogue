#==============================================================================
# Plasmacore.rogue
#==============================================================================

$requireRogue "1.8.8"

$include "Plasmacore/PlasmacoreVersion.rogue"

# You application can set up the following listeners to hook into app lifecycle events.
#
#   MessageManager.set_listener( "Application.on_launch",
#     function(m:Message)
#       ...
#     endFunction
#   )
#   MessageManager.set_listener( "Application.on_start", ... )
#   MessageManager.set_listener( "Application.on_stop",  ... )
#   MessageManager.set_listener( "Application.on_save",  ... )  # Called when the app should auto-save the game to Plasmacore.application_data_folder

$if not target("Console")

$if (target("Web")) nativeHeader #include <emscripten.h>

$include "Plasmacore/AcceleratedValue.rogue"
$include "Plasmacore/Angles.rogue"
$include "Plasmacore/Bezier.rogue"
$include "Plasmacore/Bitmap.rogue"
$include "Plasmacore/Box.rogue"
$include "Plasmacore/Box2D.rogue"
$include "Plasmacore/Canvas.rogue"
$include "Plasmacore/Circle.rogue"
$include "Plasmacore/CompositeImage.rogue"
$include "Plasmacore/DefaultFont.rogue"
$include "Plasmacore/Display.rogue"
$include "Plasmacore/DisplayEffect.rogue"
$include "Plasmacore/Drawable.rogue"
$include "Plasmacore/Font.rogue"
$include "Plasmacore/GameGUI"
$include "Plasmacore/Image.rogue"
$include "Plasmacore/ImageList.rogue"
$include "Plasmacore/ImageShader.rogue"
$include "Plasmacore/ImageSheetBuilder.rogue"
$include "Plasmacore/iOS.rogue"
$include "Plasmacore/Lighting.rogue"
$include "Plasmacore/Line.rogue"
$include "Plasmacore/macOS.rogue"
$include "Plasmacore/Material.rogue"
$include "Plasmacore/Matrix.rogue"
$include "Plasmacore/Mesh.rogue"
$include "Plasmacore/MeshBuilder.rogue"
$include "Plasmacore/Messaging.rogue"
$include "Plasmacore/Model.rogue"
$include "Plasmacore/Layer.rogue"
$include "Plasmacore/Log.rogue"
$include "Plasmacore/OpenGL.rogue"
$include "Plasmacore/OverlayLog.rogue"
$include "Plasmacore/PlasmacoreTiming.rogue"
$include "Plasmacore/PlasmacoreUI.rogue"
$include "Plasmacore/PlasmacoreUITheme.rogue"
$include "Plasmacore/Polygon.rogue"
$include "Plasmacore/ProjectionMode.rogue"
$include "Plasmacore/Quad.rogue"
$include "Plasmacore/Quaternion.rogue"
$include "Plasmacore/Ray.rogue"
$include "Plasmacore/RenderMode.rogue"
$include "Plasmacore/RenderTarget.rogue"
$include "Plasmacore/Renderer.rogue"
$include "Plasmacore/RichText.rogue"
$include "Plasmacore/Screen.rogue"
$include "Plasmacore/ScreenState.rogue"
$include "Plasmacore/Shader.rogue"
$include "Plasmacore/Sound.rogue"
$include "Plasmacore/Sprite.rogue"
$include "Plasmacore/System.rogue"
$include "Plasmacore/SystemFont.rogue"
$include "Plasmacore/Texture.rogue"
$include "Plasmacore/TextureImage.rogue"
$include "Plasmacore/TileMapLayout.rogue"
$include "Plasmacore/Triangle.rogue"
$include "Plasmacore/TriangleCullingMode.rogue"
$include "Plasmacore/Vertex.rogue"
$include "Plasmacore/Window.rogue"
$include "Plasmacore/XY.rogue"
$include "Plasmacore/XYZ.rogue"
$include "Plasmacore/XYZW.rogue"

module Plasmacore
  uses Geometry            [export]
  uses Bitmap              [export]
  uses UI                  [export]
  uses Utility/Action      [export]
  uses Utility/ProgressFn  [export]
  uses Utility/TargetValue [export]

class Plasmacore [essential singleton]
  PROPERTIES
    next_resource_id        = 1
    display_screen_types      = StringTable<<TypeInfo>>()
    global_update_callback  : Function()
    global_update_timer     = UpdateTimer()
    displays                = StringTable<<Display>>()

    image_info_list         = ImageInfo[]
    image_info_lookup       = Table<<String,ImageInfo>>()
    image_group_info_lookup = Table<<String,ImageGroupInfo>>()
    image_filters           = String[]

    application_data_folder : String
    user_data_folder        : String
    cache_folder            : String

    show_fps      : Logical
    fps           : Int32
    next_fps      : Int32
    fps_timer     = Timer(1)
    update_ticks  = 0.0

    has_focused_scroll : Logical

  METHODS
    method init
      Console.println "Initializing Plasmacore"

      load_image_index

      MessageManager.set_listener( "Application.on_launch",
        function(m:Message)
          if (m.contains("application_data_folder")) Plasmacore.application_data_folder = m.string("application_data_folder")
          if (m.contains("user_data_folder"))        Plasmacore.user_data_folder = m.string("user_data_folder")
          if (m.contains("cache_folder"))            Plasmacore.cache_folder = m.string("cache_folder")
          #trace Plasmacore.application_data_folder
          #trace Plasmacore.user_data_folder
          #trace Plasmacore.cache_folder
        endFunction
      )

      MessageManager.set_listener( "Display.on_render",
        function(m:Message)
          try
            if (Plasmacore.show_fps)
              ++Plasmacore.next_fps
              if (Plasmacore.fps_timer.is_expired)
                Plasmacore.fps = Plasmacore.next_fps
                Plasmacore.next_fps = 0
                Plasmacore.fps_timer.restart
              endIf
            endIf
            local display_size = XY( m.int32("display_width"),m.int32("display_height") )
            local viewport_size : XY
            if (m.contains("viewport_width"))
              viewport_size = XY( m.int32("viewport_width"),m.int32("viewport_height") )
            else
              viewport_size = display_size
            endIf
            local refresh_rate = m.int32( "refresh_rate", 60 )
            Display( m.string("display_name") ).render( display_size, viewport_size, refresh_rate )
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Display.on_graphics_lost",
        function(m:Message)
          try
            Display( m.string("display_name") ).on_graphics_lost
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Display.on_key_event",
        function(m:Message)
          try
            local display   = Display( m.string("display_name") )
            local keycode   = m.int32( "keycode" )
            local syscode   = m.int32( "syscode" )
            local is_repeat = m.logical( "is_repeat" )
            local is_press  = m.logical( "is_press" )
            if (not is_repeat) Keyboard.key_pressed[ keycode & 255 ] = is_press
            local e = KeyEvent( keycode, syscode, is_press, is_repeat )
            e.timestamp = m.timestamp
            display.handle( e )
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Display.on_focus_gained",
        function(m:Message)
          try
            Keyboard.clear_pressed_keys
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Display.on_pointer_event",
        function(m:Message)
          try
            local display = Display( m.string("display_name") )
            local x = m.int32("x")
            local y = m.int32("y")
            if (x or y)
              # On mobile web, SDL sends mouse (pointer) events at (0,0) followed by finger (stylus) events
              # at actual (x,y) coordinates. As a kludge we'll ignore pointer events at (0,0)
              local scale = display.scale
              local pos = XY(x,y) * scale - Display.offset

              if (Plasmacore.has_focused_scroll and not Display.bounds.contains(pos))
                Plasmacore.has_focused_scroll = false
                local e = ScrollEvent( XY(0,0), &!in_progress, &density=Display.density )
                e.timestamp = m.timestamp
                display.handle( e )
              endIf

              local delta = XY( m.real64("dx"), m.real64("dy") ) * scale
              local e = PointerEvent( m.int32("type"), pos, delta, m.int32("index"), m.logical("cancelled") )
              e.timestamp = m.timestamp
              Pointer.on( e )
              display.handle( e )
            endIf
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Display.on_scroll_event",
        function(m:Message)
          try
            local display = Display( m.string("display_name") )
            local scale = display.scale
            local delta = XY( m.real64("dx"), m.real64("dy") ) * scale
            local is_precise  = m.logical( "is_precise" )
            local in_progress = m.logical( "in_progress" )
            local is_momentum = m.logical( "is_momentum" )

            Plasmacore.has_focused_scroll = in_progress and not is_momentum

            local e = ScrollEvent( delta, &=is_precise, &=in_progress, &=is_momentum, &density=Display.density )
            e.timestamp = m.timestamp
            display.handle( e )
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Input.on_stylus_event",
        # Stylus/touch event not associated with any display.  Dispatch to each display,
        # mapping normalized coordinates to each display's size.
        function(m:Message)
          try
            local pos = XY( m.real64("x"), m.real64("y") )
            local type = m.int32( "type" )
            local index = m.int32( "index" )
            local is_cancelled = m.logical( "cancelled" )
            forEach (display in Plasmacore.displays)
              if (display.is_configured)
                local e = PointerEvent( type, pos*Display.size-Display.offset, XY(0,0), index, is_cancelled )
                e.timestamp = m.timestamp
                Pointer.on( e )
                display.handle( e )
              endIf
            endForEach
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

      MessageManager.set_listener( "Display.on_text_event",
        function(m:Message)
          try
            local display    = Display( m.string("display_name") )
            local character  = m.int32( "character" )->Character
            local text       : String
            if (m.contains("text")) text = m.string( "text" )
            local e = TextEvent( character, text )
            e.timestamp = m.timestamp
            display.handle( e )
          catch (e:Error)
            println e
            Log.println( e.stack_trace )
          endTry
        endFunction )

    method add_image_filter( filter:String )->this
      if (not (filter.contains('*') or filter.contains('?')))
        filter = "**$**" (filter)
      endIf
      image_filters.add( filter )
      filter_images
      return this

    method application_data_folder->String
      # iOS: Application data that is not accessible to the user but is still backed up
      # on iCloud.
      # Other OS: general data folder
      $if not target("Android")
        if (not @application_data_folder)
          application_data_folder = native( "Plasmacore_get_application_data_folder()" )->String
        endIf
      $endIf
      return @application_data_folder

    method asset_file( name:String )->File
      local filepath = asset_filepath( name )
      if (not filepath) return null
      return File( filepath )

    method asset_filepath( name:String )->String
      if (File.exists(name)) return name   # already correct

      # may return null
      $if target("Android")
        local result = Message( "Plasmacore.find_asset" ).set( "filepath", name ).send
        if (not result) return null
        if (not result.contains("filepath")) return null
        return result.string( "filepath" )
      $else
        return native( "Plasmacore_find_asset( $name )" )->String
      $endIf

    method cache_folder->String
      # iOS: Files that can be removed by the OS as needed.
      # Other OS: general data folder
      # Android cache folder is sent in Application.on_launch
      $if not target("Android")
        if (not @cache_folder)
          $if target("iOS")
            cache_folder = application_data_folder + "/Caches"
          $else
            cache_folder = application_data_folder + "/Cache"
            if (not File.exists(@cache_folder)) File.create_folder( @cache_folder )
          $endIf
        endIf
      $endIf
      return @cache_folder

    method clear_image_filters->this
      image_filters.clear
      return this

    method create_resource_id->Int32
      ++next_resource_id
      return (next_resource_id - 1)

    method data_file( name:String )->File
      return asset_file( "Assets/Data/" + name )

    method data_filepath( name:String )->String
      return asset_filepath( "Assets/Data/" + name )

    method display( name:String )->Display
      local result = displays[ name ]
      if (not result)
        result = Display()
        result.name = name
        Plasmacore.displays[ name ] = result
      endIf
      return result

    method filter_images
      image_info_lookup.clear

      # Full filepath
      forEach (image_info in image_info_list)
        local name = image_info.name
        image_info_lookup[ name ] = image_info
      endForEach

      # For A/B/C.png, add B/C.png and C.png as separate entries as long as they
      # do not conflict with any existing entry.  If there is a conflict, mark the
      # entry as null rather than creating an arbitrary default
      forEach (image_info in image_info_list)
        local name = image_info.name
        if (filter_fn_keep(name))
          while (name.contains('/'))
            name = name.after_first( '/' )
            if (image_info_lookup.contains(name))
              image_info_lookup[ name ] = null
            else
              image_info_lookup[ name ] = image_info
            endIf
          endWhile
        endIf
      endForEach

      # Remove any entries that were in conflict
      forEach (key in image_info_lookup.keys)
        if (image_info_lookup[key] is null) image_info_lookup.remove( key )
      endForEach

    method filter_fn_keep( name:String )->Logical
      if (not image_filters.count) return true
      forEach (filter in image_filters)
        if (File.matches_wildcard_pattern(name,filter)) return true
      endForEach
      return false

    method find_image_info( name:String )->ImageInfo
      local info = image_info_lookup[ name ]
      if (info) return info.load

      println "No such image: " + name

      return null

    method global_update
      global_update_timer.update
      while (global_update_timer.tick)
        if (global_update_callback) global_update_callback()
      endWhile

    method get_image_group_info( filepath:String )->ImageGroupInfo
      local info = image_group_info_lookup[ filepath ]
      if (info) return info

      info = ImageGroupInfo( filepath )
      image_group_info_lookup[ filepath ] = info
      return info

    method load_image_index
      local image_index = JSON.load_table( asset_file("Assets/Images/ImageIndex.json") ).decompressed

      image_info_list.clear
      image_group_info_lookup.clear

      # Image groups (image sheets / texture atlases)
      forEach (group_info in image_index//groups)
        local group = get_image_group_info( group_info//filepath->String )
        forEach (image in group_info//images)
          local name = image->String
          image_info_list.add( ImageInfo(name, group) )
        endForEach
      endForEach

      # Standalone images (textures)
      forEach (image_info in image_index//standalone)
        image_info_list.add( ImageInfo(image_info) )
      endForEach

      filter_images

    method on_global_update( global_update_callback )
      noAction

    method set_image_filter( filter:String )->this
      clear_image_filters.add_image_filter( filter ).filter_images
      return this

    method set_show_fps( setting:Logical )->this
      if (setting == show_fps) return this

      @show_fps = setting
      fps = 0
      fps_timer.restart
      return this

    method time->Real64
      # Runs the "app time" which runs at the same rate as real time but only
      # updates while the app is active.
      return (update_ticks / Display.updates_per_second)

    method user_data_folder->String
      # These files are exposed to the user on iOS
      $if not target("Android")
        if (not @user_data_folder)
          user_data_folder = native( "Plasmacore_get_user_data_folder()" )->String
        endIf
      $endIf
      return @user_data_folder

endClass

class ImageInfo
  ENUMERATE
    TYPE_TEXTURE_IMAGE
    TYPE_IMAGE_LIST
    TYPE_FONT

  PROPERTIES
    name             : String
    group            : ImageGroupInfo

    type             : Int32

    unicode          : Character

    display_size     : XY
    texture_filename : String
    texture_bounds   : Box
    is_opaque        : Logical
    snap             : Logical
    spacing          : Value

    images           : ImageInfo[]

  METHODS
    method init( name, group )

    method init( existing:ImageInfo )
      name = existing.name
      group = existing.group
      type = existing.type
      unicode = existing.unicode
      display_size = existing.display_size
      texture_bounds = existing.texture_bounds
      texture_filename = existing.texture_filename
      is_opaque = existing.is_opaque
      snap = existing.snap
      spacing = existing.spacing
      if (existing.images) images = existing.images.cloned

    method init( info:Value )
      name = info//name
      load( info )

    method cloned->ImageInfo
      return ImageInfo( this )

    method load->this
      if (group) group.load
      return this

    method load( info:Value )
      unicode = Character( info//unicode->Int32 )

      which (info//type)
        case "TextureImage"
          type = TYPE_TEXTURE_IMAGE
          texture_filename = info//texture//filename->String
          texture_bounds = Box( info//texture//bounds )
          display_size = XY( info//display_size )
          is_opaque = info//is_opaque

        case "Image[]"
          type = TYPE_IMAGE_LIST
          ensure images
          forEach (img in info//images)
            images.add( ImageInfo(img) )
          endForEach

        case "Font"
          type = TYPE_FONT
          ensure images
          forEach (img in info//characters)
            images.add( ImageInfo(img) )
          endForEach
          snap = info//snap
          if (info//spacing)
            spacing = info//spacing
          endIf


      endWhich

endClass

class ImageGroupInfo
  PROPERTIES
    filepath  : String
    is_loaded : Logical

  METHODS
    method init( filepath )

    method load
      if (is_loaded) return
      is_loaded = true

      local manifest = JSON.load_table( Plasmacore.asset_file(filepath) ).decompressed
      forEach (image in manifest//images)
        local info = Plasmacore.image_info_lookup[ image//name ]
        if (not info) nextIteration

        info.load( image )
      endForEach

endClass

$if not target("Android")
nativeCode extern "C" RogueString* Plasmacore_find_asset( RogueString* name );
nativeCode extern "C" RogueString* Plasmacore_get_user_data_folder();
nativeCode extern "C" RogueString* Plasmacore_get_application_data_folder();
$endIf

$endIf  # not Console
