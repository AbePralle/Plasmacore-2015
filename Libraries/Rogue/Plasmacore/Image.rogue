module Plasmacore

class Image
  DEFINITIONS
    FLAG_HFLIP = 1
    FLAG_VFLIP = 2

  GLOBAL METHODS
    method create( name:String )->TextureImage
      return TextureImage( name )

    method create( texture:Texture )->TextureImage
      return TextureImage( texture )

    method create( other:Image, subset:Box )->TextureImage
      return TextureImage( other, subset )

    method create( size:XY )->CompositeImage
      return CompositeImage( size )

    method create( image_info:ImageInfo )->TextureImage
      return TextureImage( image_info )

  PROPERTIES
    position      : XY
    z             = 0.0  # Offset from Display.z; set to -0.5*Display.z to be closer to camera, Display.z to be 2x as far, etc.
    size          : XY
    original_size : XY
    rotation      : Angles
    shader        : Shader
    anchor        = Anchor.CENTER : Anchor
    render_mode   : RenderMode  # no need to set explicitly in most cases
    color         = Color.WHITE : Color
    opacity       = 1.0  # Master opacity; multiplies each color's alpha component
    flags         : Int32

  METHODS
    method init( other:Image )
      position      = other.position
      z             = other.z
      size          = other.@size
      original_size = other.@original_size
      rotation      = other.rotation
      shader        = other.shader
      anchor        = other.anchor
      render_mode   = other.render_mode
      color         = other.color
      opacity       = other.opacity
      flags         = other.flags

    method add( child:Image )
      throw UnsupportedOperationError()

    method add( child:Image, position:XY )
      throw UnsupportedOperationError()

    method bounds->Box
      return bounds_at( position )

    method bounds_at( at_position:XY )->Box
      local handle = (anchor.position * size)
      return Box( at_position - handle, size )

    method cloned->Image
      throw UnsupportedOperationError()

    method draw
      draw( (quad) => quad.fill )

    method draw( fn:Function(DrawableQuad) )
      noAction

    method draw( position )
      draw

    method draw( x:Real64, y:Real64 )
      draw( XY(x,y) )

    method hflip->Logical [macro]
      return (flags & FLAG_HFLIP)?

    method height->Real64 [macro]
      return (this.size.y)

    method is_loaded->Logical
      return true

    method is_opaque->Logical
      return true

    method load->Logical
      return true

    method prepare->Logical
      if (opacity <= 0.0 or not load) return false
      return true

    method scale->XY
      return size / original_size

    method scale_to_fill( other_bounds:Box )
      scale = (other_bounds.size / size).max
      position = other_bounds.center.floor
      anchor = Anchor.CENTER

    method scale_to_fit( other_bounds:Box )
      scale = (other_bounds.size / size).min
      position = other_bounds.center.floor
      anchor = Anchor.CENTER

    method set( bitmap:Bitmap )
      noAction

    method set_hflip( setting:Logical )
      if (setting) flags |=  FLAG_HFLIP
      else         flags &= !FLAG_HFLIP

    method set_vflip( setting:Logical )
      if (setting) flags |=  FLAG_VFLIP
      else         flags &= !FLAG_VFLIP

    method set_position( x:Real64, y:Real64 )
      @position = XY(x,y)

    method set_position( @position )

    method set_position( xyz:XYZ )
      @position = xyz->XY
      @z = xyz.z

    method set_position( x:Real64, y:Real64, _z:Real64 )
      @position = XY(x,y)
      @z = _z

    method set_rotation( angle:Degrees )
      @rotation = Angles.z( angle )

    method set_rotation( angle:Radians )
      @rotation = Angles.z( angle )

    method set_scale( scale:XY )
      size = scale * original_size

    method set_scale( s:Real64 )
      size = s * original_size

    method set_tint( t:Real64 )
      # t=0.0:      shader set to null (will default to TEXTURE)
      # t>0.0..1.0: shader set to TEXTURE_WITH_COLOR_FILL, color alpha set to t*255
      if (t == 0)
        shader = null  # use default
      else
        local a32 = (t * 255)->Int32.clamped( 0, 255 ) :<<: 24
        color  = (color & 0xFFFFFF) | a32
        shader = ImageShader.TEXTURE_WITH_COLOR_FILL
      endIf

    method set_tint( t:Real64, tint_color:Color )
      color = tint_color
      set_tint( t )

    method set_uv( texel_coordinates:Box )
      noAction

    method set_uv( top_left_uv:XY, bottom_right_uv:XY )
      # Uses unit coordinates (nominally XY(0,0)..XY(1,1))
      noAction

    method texture->Texture
      return null

    method unload
      noAction

    method uv->Box
      return Box(0,0,0,0)

    method vflip->Logical [macro]
      return (flags & FLAG_VFLIP)?

    method width->Real64 [macro]
      return (this.size.x)

endClass

