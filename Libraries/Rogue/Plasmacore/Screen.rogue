module Plasmacore


class Screen
  PROPERTIES
    display               : Display
    is_active             : Logical
    needs_first_update    = true
    previous_display_size : XY?

    loaded_asset_count    : Int32
    total_asset_count     : Int32

    lighting : Lighting
    # 3D lighting model

    ui_list  : UI[]
    actions  : Action

  METHODS
    method add( ui:UI )
      ensure ui_list
      ui_list.add( ui )

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:ScrollEvent )

    method after( e:TextEvent )

    method after_draw

    method after_resize

    method after_update

    method change_state( new_state:ScreenState )->ScreenState
      local cur = new_state
      while (cur.next_state) cur = cur.next_state
      cur.next_state = screen_state.next_state
      screen_state.next_state = null
      new_state.prior_state = screen_state.prior_state

      new_state.on_prepare
      screen_state.on_finish
      screen_state.is_active = false
      Display.screen_state = new_state
      screen_state.screen = this
      screen_state.is_active = true
      screen_state.on_start
      return screen_state

    method change_screen( new_screen:Screen )->Screen
      new_screen.display = display
      new_screen.on_prepare
      this.on_finish
      this.is_active = false
      display.screen = new_screen
      return new_screen

    method dispatch_message<<$MessageType>>( message:$MessageType )
      on_message( message )
      if (ui_list) (forEach in ui_list).dispatch_message( message )

    method exit_state
      local new_state : ScreenState
      if (screen_state.next_state)
        new_state = screen_state.next_state
      elseIf (screen_state.prior_state)
        new_state = screen_state.prior_state
      else
        println "ERROR: Screen/ScreenState.exit_state called with no next or prior screen_state"
        new_state = ScreenState()
      endIf

      new_state.screen = this
      new_state.on_prepare

      screen_state.on_finish
      screen_state.is_active = false

      new_state.is_active = true

      if (screen_state.next_state)
        new_state.prior_state = screen_state.prior_state
        Display.screen_state = new_state
        screen_state.on_start
      elseIf (screen_state.prior_state)
        Display.screen_state = new_state
        screen_state.on_resume
      else
        Display.screen_state = new_state
        screen_state.on_start
      endIf

    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf

      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle( e:ScrollEvent )
      on( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle( e:TextEvent )
      on( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle_draw
      on_draw
      if (ui_list) (forEach in ui_list).draw
      after_draw

    method handle_resize
      on_resize
      if (ui_list) (forEach in ui_list).request_layout
      after_resize

    method handle_update
      if (actions) actions = actions.update
      on_update

      if (ui_list)
        local display_bounds = Display.bounds
        (forEach in ui_list).update( display_bounds )
      endIf

      after_update

    method insert( ui:UI )
      ensure ui_list
      ui_list.insert( ui )

    method lighting->Lighting
      return (ensure @lighting)

    method on( e:KeyEvent )
      noAction

    method on( e:PointerEvent )
      noAction

    method on( e:ScrollEvent )
      noAction

    method on( e:TextEvent )
      noAction

    method on_draw
      noAction

    method on_finish
      noAction

    method on_message<<$MessageType>>( message:$MessageType )
      noAction

    method on_message( message:String )
      noAction

    method on_prepare
      noAction

    method on_resize
      noAction

    method on_start
      noAction

    method on_transition_after_draw
      local info = Display.transition_info.value
      Display.bounds.fill( info.color.with_alpha(info.eased_progress) )

    method on_transition_before_draw

    method on_transition_finished
      # This screen has finished being transitioned to

    method on_update
      noAction

    method push_state( new_state:ScreenState )
      new_state.prior_state = screen_state
      screen_state.is_active = false
      screen_state.on_suspend
      Display.screen_state = new_state
      screen_state.screen = this
      screen_state.is_active = true
      screen_state.on_start

    method queue_state( new_state:ScreenState, &insert )
      screen_state.queue_state( new_state, &=insert )

    method remove( ui:UI )
      if (ui_list) ui_list.remove( ui )

    method screen_state->ScreenState
      return Display.screen_state

    method set_state( new_state:ScreenState )
      change_state( new_state )

    method set_ui( ui:UI )
      ensure ui_list
      ui_list.clear
      ui_list.add( ui )

    method ui->UI
      if (not ui_list or ui_list.is_empty) return null
      return ui_list.first
endClass

