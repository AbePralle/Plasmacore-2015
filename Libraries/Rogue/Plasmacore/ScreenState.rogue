module Plasmacore

class ScreenState
  GLOBAL METHODS
    method operator+( a:ScreenState, b:ScreenState )->ScreenState
      if (not a) return b
      if (not b) return a
      a.queue_state( b )
      return a

  PROPERTIES
    screen                : Screen

    is_active             : Logical
    needs_first_update    = true
    previous_display_size : XY?

    next_state            : ScreenState
    prior_state           : ScreenState

    ui_list               : UI[]
    actions               : Action

  METHODS
    method init( screen=null )

    method add( ui:UI )
      ensure ui_list
      ui_list.add( ui )

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:ScrollEvent )

    method after( e:TextEvent )

    method after_draw

    method after_resize

    method after_update

    method broadcast_message( message:Value )
      dispatch_message( message )

    method change_state( new_state:ScreenState )->ScreenState
      return screen.change_state( new_state )

    method change_screen( new_screen:Screen )->Screen
      return screen.change_screen( new_screen )

    method dispatch_message( message:Value )
      on_message( message )
      if (ui_list) (forEach in ui_list).dispatch_message( message )
      screen.dispatch_message( message )

    method exit_state
      Display.screen_state = this
      # This should already be the case but the error is hard to track down if it's not!

      screen.exit_state

    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle( e:ScrollEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle( e:TextEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      if (ui_list)
        forEach (ui in ui_list step -1)
          ui.handle( e )
          if (e.is_consumed) return
        endForEach
      endIf
      after( e )

    method handle_draw
      on_draw
      screen.handle_draw

      if (ui_list) (forEach in ui_list).draw

      after_draw

    method handle_resize
      on_resize

      if (ui_list) (forEach in ui_list).request_layout

      local cur_screen = screen
      if (not cur_screen.previous_display_size.exists or cur_screen.previous_display_size.value != Display.size)
        cur_screen.handle_resize
        cur_screen.previous_display_size = Display.size
      endIf

      after_resize

    method handle_update
      if (actions) actions = actions.update
      on_update

      screen.needs_first_update = false
      screen.handle_update

      if (ui_list)
        local display_bounds = Display.bounds
        (forEach in ui_list).update( display_bounds )
      endIf

      after_update

    method insert( ui:UI )
      ensure ui_list
      ui_list.insert( ui )

    method on( e:KeyEvent )
      noAction

    method on( e:PointerEvent )
      noAction

    method on( e:ScrollEvent )
      noAction

    method on( e:TextEvent )
      noAction

    method on_draw
      noAction

    method on_finish
      noAction

    method on_message( message:Value )
      noAction

    method on_prepare
      noAction

    method on_resize
      noAction

    method on_resume
      noAction

    method on_start
      noAction

    method on_suspend
      noAction

    method on_transition_after_draw
      screen.on_transition_after_draw

    method on_transition_before_draw
      screen.on_transition_before_draw

    method on_transition_finished
      # This screen state has finished being transitioned to
      screen.on_transition_finished

    method on_update
      noAction

    method push_state( new_state:ScreenState )
      screen.push_state( new_state )

    method queue_state( new_state:ScreenState, &insert )
      if (not new_state.screen) new_state.screen = screen

      if (insert)
        if (next_state) new_state.queue_state( next_state )
        next_state = new_state
      else
        local cur = this
        while (cur.next_state) cur = cur.next_state
        cur.next_state = new_state
      endIf

    method remove( ui:UI )
      if (ui_list) ui_list.remove( ui )

    method set_screen( @screen )

    method set_ui( ui:UI )
      ensure ui_list
      ui_list.clear
      ui_list.add( ui )

    method ui->UI
      if (not ui_list or ui_list.is_empty) return null
      return ui_list.first

endClass

class ScreenState<<$ScreenType>> : ScreenState
  METHODS
    method screen->$ScreenType
      if (@screen is null)
        throw Error( "$.screen is being accessed before the screen_state is fully configured.\n" ...
                     "If this is being accessed from init(), move the access to on_start() instead." (type_name) )
      endIf
      return @screen->(as $ScreenType)
endClass

class ChangeScreenState( new_screen:Screen ) : ScreenState
  METHODS
    method on_start
      change_screen( new_screen )
endClass

class ExecuteState( fn:Function ) : ScreenState
  METHODS
    method on_start
      fn()
      exit_state
endClass

class FadeInState : ScreenState
  PROPERTIES
    color   : Color
    opacity : EasedValue<<Real64>>

  METHODS
    method init( duration=0.25:Real64, color=Color.BLACK, progress_fn=ProgressFn.QUADRATIC_IN:ProgressFnType )
      opacity = EasedValue<<Real64>>( 1.0, duration, progress_fn )

    method on_start
      opacity.target_value = 0.0

    method after_draw
      Display.bounds.fill( color.with_alpha(opacity.value) )
      if (opacity.value == 0.0) exit_state
endClass

class FadeOutState : ScreenState
  PROPERTIES
    color   : Color
    opacity : EasedValue<<Real64>>

  METHODS
    method init( duration=0.25:Real64, color=Color.BLACK, progress_fn=ProgressFn.QUADRATIC_OUT:ProgressFnType )
      opacity = EasedValue<<Real64>>( 0.0, duration, progress_fn )

    method on_start
      opacity.target_value = 1.0

    method after_draw
      Display.bounds.fill( color.with_alpha(opacity.value) )
      if (opacity.value == 1.0) exit_state
endClass

