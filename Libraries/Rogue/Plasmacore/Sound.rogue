module Plasmacore

class Sound
  DEPENDENCIES
$if not target("Android")
    nativeHeader void*  PlasmacoreSound_create( RogueString* filepath, bool is_music );
    nativeHeader void   PlasmacoreSound_delete( void* sound );
    nativeHeader double PlasmacoreSound_duration( void* sound );
    nativeHeader bool   PlasmacoreSound_is_playing( void* sound );
    nativeHeader void   PlasmacoreSound_pause( void* sound );
    nativeHeader void   PlasmacoreSound_play( void* sound, bool repeating );
    nativeHeader double PlasmacoreSound_position( void* sound );
    nativeHeader void   PlasmacoreSound_set_position( void* sound, double to_time );
    nativeHeader void   PlasmacoreSound_set_volume( void* sound, double volume );
$endIf

  GLOBAL PROPERTIES
    mute_sound = false
    mute_music = false

  PROPERTIES
    name       : String
    filepath   : String
    id         : Int32
    is_music   : Logical
    is_looping : Logical

  METHODS
    method init( name, music=null:Logical?, &looping )
      is_looping = looping
      local asset_name = ""
      if (not name.begins_with("Assets/"))
        asset_name = "Assets/"
        if (not name.begins_with("Sounds/")) asset_name += "Sounds/"
      endIf

      asset_name += name

      filepath = find_sound( asset_name )
      if (filepath)
        if (not music.exists)
          music = false
$if target("Android")
          if (File.size(filepath) >= 262_144) music = true
$else
          which (File.extension(filepath))
            case "mp3": music = true
          endWhich
$endIf
        endIf

        this.is_music = music.value
        load

      else
        println "Sound not found:" + name
      endIf

    method can_play->Logical
      return (not is_playing)

    method duration->Real64
      if (id) return SoundManager[ id ].duration
      return 0

    method find_sound( asset_name:String )->String
      local filepath = Plasmacore.asset_filepath( asset_name )
      if (filepath) return filepath

      filepath = Plasmacore.asset_filepath( asset_name + ".caf" )
      if (filepath) return filepath

      filepath = Plasmacore.asset_filepath( asset_name + ".mp3" )
      if (filepath) return filepath

      filepath = Plasmacore.asset_filepath( asset_name + ".wav" )
      if (filepath) return filepath

      filepath = Plasmacore.asset_filepath( asset_name + ".ogg" )
      if (filepath) return filepath

      return null

    method is_finished->Logical
      if (id) return SoundManager[ id ].is_finished
      else    return true

    method is_playing->Logical
      if (id) return SoundManager[ id ].is_playing
      else    return false

    method load
      if (not id) id = SoundManager.load( filepath, is_music )

    method on_cleanup
      unload

    method pause
      if (id) SoundManager[ id ].pause

    method play
      if (Sound.mute_sound and not is_music) return
      if (Sound.mute_music and is_music) return
      if (id) SoundManager[ id ].play( is_looping )

    method play( looping:Logical )
      is_looping = looping
      play

    method position->Real64
      if (id) return SoundManager[ id ].position
      else    return 0

    method set_position( time:Real64 )
      if (id) SoundManager[ id ].set_position( time )

    method set_volume( new_volume:Real64 )
      if (not System.is_web and id) SoundManager[ id ].set_volume( new_volume )

    method reset
      # No effect on simple sounds; resets the playlist on SoundGroup
      noAction

    method resume
      # Resumes playing the sound only if it was previously paused
      if (id) SoundManager[ id ].resume

    method stop
      if (id) SoundManager[ id ].stop

    method unload
      SoundManager.unload( id )
      id = 0
endClass

class SoundGroup
  PROPERTIES
    sounds = Sound[]
    queue  = Sound[]
    played = Sound[]

  METHODS
    method init( name:String, count:Int32 )
      forEach (i in 1..count)
        sounds.add( Sound(name.replacing("$",""+i)) )
      endForEach

    method init( existing:SoundGroup )
      sounds.add( existing.sounds )

    method add( sound:Sound )
      sounds.add( sound )

    method play->Sound
      if (queue.is_empty)
        queue.add( sounds )
        loop 2
          # Remove the last two sounds that were played in the hopes of avoiding
          # a no-play due to already playing.
          if (played.count and queue.count > 1)
            queue.remove( played.remove_last )
          endIf
        endLoop
        played.clear
        queue.shuffle
      endIf

      local sound = queue.remove_first
      played.add( sound )
      sound.play

      return sound
endClass


$if target("Android")
# Android uses direct message sending to avoid having to go from Rogue -> C -> Java for each call.
class SoundData
  PROPERTIES
    filepath   : String
    is_music   : Logical
    is_paused  : Logical
    is_looping : Logical
    player_id  : Int32

  METHODS
    method init( filepath, is_music )
      local reply = Message("Sound.create").set("filepath",filepath).set( "is_music",is_music).send
      if (reply) player_id = reply.int32( "id" )

    method duration->Real64
      # In seconds
      local reply = Message("Sound.duration").set("id",player_id).send
      if (reply) return reply.real64( "duration" )
      else       return 0

    method is_finished->Logical
      if (is_paused) return false
      return not is_playing

    method is_playing->Logical
      if (is_paused) return false
      local reply = Message("Sound.is_playing").set("id",player_id).send
      if (reply) return reply.logical( "is_playing" )
      else       return false

    method pause
      if (not is_paused and is_playing)
        is_paused = true
        Message( "Sound.pause" ).set( "id", player_id ).send
      endIf

    method play( &looping )
      is_looping = looping
      is_paused = false
      Message( "Sound.play" ).set( "id", player_id ).set( "is_repeating", is_looping ).send

    method position->Real64
      local reply = Message("Sound.position").set("id",player_id).send
      if (reply) return reply.real64( "position" )
      else       return 0

    method set_position( time:Real64 )
      Message( "Sound.set_position" ).set( "id", player_id ).set( "position", time ).send

    method set_volume( new_volume:Real64 )
      Message( "Sound.set_volume" ).set( "id", player_id ).set( "volume", new_volume ).send

    method resume
      if (is_paused) play( is_looping )

    method stop
      pause
      is_paused = false
      position = 0

    method unload
      Message( "Sound.unload" ).set( "id", player_id ).send
      player_id = 0
endClass

$else
# For every platform except Android.
class SoundData
  PROPERTIES
    filepath   : String
    is_music   : Logical
    is_paused  : Logical
    is_looping : Logical
    native "void* player;"

  METHODS
    method init( filepath, is_music )
      native @|$this->player = PlasmacoreSound_create( $filepath, $is_music );

    method duration->Real64
      return native( "PlasmacoreSound_duration( $this->player )" )->Real64

    method is_finished->Logical
      if (is_paused) return false
      return not is_playing

    method is_playing->Logical
      if (is_paused) return false
      return native( "PlasmacoreSound_is_playing( $this->player )" )->Logical

    method pause
      if (not is_paused and is_playing)
        is_paused = true
        native @|PlasmacoreSound_pause( $this->player );
      endIf

    method play( &looping )
      is_looping = looping
      is_paused = false
      native @|PlasmacoreSound_play( $this->player, $looping );

    method position->Real64
      return native( "PlasmacoreSound_position( $this->player )" )->Real64

    method set_position( time:Real64 )
      native @|PlasmacoreSound_set_position( $this->player, $time );

    method set_volume( new_volume:Real64 )
      native @|PlasmacoreSound_set_volume( $this->player, $new_volume );

    method resume
      if (is_paused) play( is_looping )

    method stop
      pause
      is_paused = false
      position = 0

    method unload
      native @|PlasmacoreSound_delete( $this->player );
              |$this->player = 0;
endClass
$endIf

class SoundManager [singleton]
  PROPERTIES
    sound_data            = SoundData[]
    free_sound_data_slots = Int32[]

  METHODS
    method init
      sound_data.add( null )  # Prevent '0' from being a valid id

    method get( id:Int32 )->SoundData
      if (id < 0 or id >= sound_data.count) return null
      return sound_data[ id ]

    method is_loading->Logical
      $if target("Android")
      local reply = Message("SoundManager.is_loading").send
      return (reply and reply.logical("is_loading"))
      $else
        return false
      $endIf

    method load( filepath:String, is_music:Logical )->Int32
      local id : Int32

      local data = SoundData( filepath, is_music )

      if (free_sound_data_slots.count)
        id = free_sound_data_slots.remove_last
        sound_data[ id ] = data
      else
        id = sound_data.count
        sound_data.add( data )
      endIf

      return id

    method unload( id:Int32 )
      if (id < 0 or id >= sound_data.count) return

      local data = sound_data[ id ]
      sound_data[ id ] = null
      free_sound_data_slots.add( id )

      if (data) data.unload

endClass


