module Plasmacore

class GGList : GGList<<GGComponent>>;

class GGList<<$ItemType>> : GGComponent
  GLOBAL METHODS
    method h->GGHorizontalList<<$ItemType>>
      return GGHorizontalList<<$ItemType>>()

    method h( bounds:Box )->GGHorizontalList<<$ItemType>>
      return GGHorizontalList<<$ItemType>>( bounds )

    method horizontal->GGHorizontalList<<$ItemType>>
      return GGHorizontalList<<$ItemType>>()

    method horizontal( bounds:Box )->GGHorizontalList<<$ItemType>>
      return GGHorizontalList<<$ItemType>>( bounds )

    method v->GGVerticalList<<$ItemType>>
      return GGVerticalList<<$ItemType>>()

    method v( bounds:Box )->GGVerticalList<<$ItemType>>
      return GGVerticalList<<$ItemType>>( bounds )

    method vertical->GGVerticalList<<$ItemType>>
      return GGVerticalList<<$ItemType>>()

    method vertical( bounds:Box )->GGVerticalList<<$ItemType>>
      return GGVerticalList<<$ItemType>>( bounds )

  PROPERTIES
    has_edge_bounce = true     # set to false to disable overscroll bounce effect and use a hard scroll limit

    layout          : GGLayout

    offset          : XY
    max_offset      : Real64
    velocity        : XY
    acceleration    : Real64

    content_size    : Int32

    is_pressed      : Logical
    is_dragging     : Logical

    drag_start      : XY
    drag_delta      : Real64
    drag_deltas     = Real64[]
    cur_pos         : XY
    drag_time       = Stopwatch()

    on_select_background_callback : Function(GGList<<$ItemType>>,XY)
endClass


class GGHorizontalList<<$ItemType>> : GGList<<$ItemType>>
  PROPERTIES
    layout = GGLayout.h : GGLayout

  METHODS
    method init

    method init( box:Box )
      position = box.position
      size = box.size
      fixed_size = size

    method init( fixed_size )

    method init( fixed_size:XY )
      this.fixed_size = fixed_size

    method adjust_offset( new_pos:XY )
      local delta = new_pos - cur_pos

      if (has_edge_bounce)
        if (offset.x > 0 and delta.x > 0)
          local resistance = 1.0 - (offset.x / content_size.or_smaller(size.x).or_larger(1))
          delta *= resistance^4
        elseIf (offset.x < max_offset and delta.x < 0)
          local resistance = 1.0 - (max_offset - offset.x) / content_size.or_smaller(size.x).or_larger(1)
          delta *= resistance^4
        endIf
      endIf

      delta = delta.xv; drag_delta = delta.x

      offset += delta
      cur_pos = new_pos

      if (not has_edge_bounce)
        offset = XY( offset.x.or_larger( max_offset ).or_smaller( 0 ), offset.y )
      endIf

    method clear->this
      prior.clear
      offset = XY(0,0)
      return this

    method dispatch_draw
      if (subcomponents)
        Display.push_clip( bounds.transformed(Display.render_target.view_transform) )
        local drawn_any = false
        forEach (component in subcomponents)
          if (component.bounds.intersects(bounds))
            component.handle_draw
            drawn_any = true
          elseIf (drawn_any)
            if (component.size.x and component.size.y)
              # Only quit non-zero-sized components
              escapeForEach
            endIf
          endIf
        endForEach
        Display.pop_clip
      endIf

    method get( index:Int32 )->$ItemType
      return subcomponents[ index ]->(as $ItemType)

    method handle( e:PointerEvent )
      GGComponentManager.pointer_position = e.position
      if (e.is_press)
        if (not is_dragging and contains(e))
          acceleration = 0.10   # halt any scrolling going on
          is_pressed = true
          drag_time.restart
          cur_pos = e.position
          drag_start = cur_pos
          GGComponentManager.pointer_focus = this
        endIf
      elseIf (e.is_move)
        if (is_dragging)
          adjust_offset( e.position )
        elseIf (is_pressed)
          if (e.position.distance_to(cur_pos) >= Display.size.magnitude * 0.01)
            is_dragging = true
            drag_deltas.clear
            cur_pos = e.position
          endIf
        else
          # Pass move event to appropriate list item
          local component = find( e )
          if (component) component.handle( e )
        endIf
      elseIf (e.is_release)
        is_pressed = false
        GGComponentManager.pointer_focus = null
        if (is_dragging)
          is_dragging = false
          acceleration = 0.10
          if (drag_deltas.count)
            local sum = 0.0
            sum += (forEach in drag_deltas)
            local avg = sum / drag_deltas.count
            if (avg.abs >= 5)
              acceleration = 0.96
              velocity += XY( avg, 0 )
            endIf
          endIf
        else
          acceleration = 0.10
          if (velocity.abs.max < 1)
            # We pressed and released list without dragging it.  Generate a press/release event
            # for the appropriate list item.
            local component = find( e )
            if (component)
              component.handle( PointerEvent(PointerEvent.PRESS,e.position,XY(0,0),e.index) ) # Press
              component.handle( e ) # Release
            else
              on_select_background( e.position )
            endIf
          endIf
        endIf
      endIf

    method on_update
      local any_movement = false
      if (is_dragging)
        # Save 1/10th second of drag deltas
        drag_deltas.add( drag_delta )
        if (drag_deltas.count > 10) drag_deltas.remove_first
        any_movement = true
      endIf

      if (not velocity.is_zero)
        offset += velocity
        velocity *= acceleration
        if (velocity.abs.max < 0.1) velocity = XY(0,0)

        if (not has_edge_bounce)
          offset = XY( offset.x.or_larger( max_offset ).or_smaller( 0 ), offset.y )
        endIf
        any_movement = true
      endIf

      if (not is_dragging)
        if (offset.x > 0)
          offset   *= XY(0.8,1)
          acceleration = 0.50
          any_movement = true
        elseIf (offset.x < max_offset)
          offset = XY( max_offset + (offset.x - max_offset) * 0.8, offset.y )
          acceleration = 0.50
          any_movement = true
        endIf
      endIf

      if (any_movement)
        update_subcomponent_layout
      endIf

      if (subcomponents)
        (forEach in subcomponents).update
      endIf

    method on_select_background( pos:XY )
      if (on_select_background_callback) on_select_background_callback( this, pos )

    method on_select_background( on_select_background_callback )->this
      return this

    method update_layout( new_bounds:Box )
      if (validated_bounds.exists and validated_bounds.value == new_bounds) return

      # Use 'layout' as a work object to figure out the total content size
      if (subcomponents)
        layout.clear
        layout.invalidate
        layout.add( forEach in subcomponents )
        layout.add( GGFiller.h )
        layout.update_layout( new_bounds )
        content_size = layout.size.x
        invalidate
      else
        content_size = 0
      endIf

      prior.update_layout( new_bounds )

    method update_subcomponent_layout
      content_size = 0

      if (subcomponents)
        local pos = position + offset
        forEach (component in subcomponents)
          component.update_layout( Box(pos,component.size) )
          pos += component.size.xv; content_size += component.size.x
        endForEach
      endIf

      max_offset = -((content_size - size.x).or_larger( 0 ))
endClass


class GGVerticalList<<$ItemType>> : GGList<<$ItemType>>
  PROPERTIES
    layout = GGLayout.v : GGLayout

  METHODS
    method init

    method init( box:Box )
      position = box.position
      size = box.size
      fixed_size = size

    method init( fixed_size )

    method init( fixed_size:XY )
      this.fixed_size = fixed_size

    method adjust_offset( new_pos:XY )
      local delta = new_pos - cur_pos

      if (has_edge_bounce)
        if (offset.y > 0 and delta.y > 0)
          local resistance = 1.0 - (offset.y / content_size.or_smaller(size.y).or_larger(1))
          delta *= resistance^4
        elseIf (offset.y < max_offset and delta.y < 0)
          local resistance = 1.0 - (max_offset - offset.y) / content_size.or_smaller(size.y).or_larger(1)
          delta *= resistance^4
        endIf
      endIf

      delta = delta.yv; drag_delta = delta.y

      offset += delta
      cur_pos = new_pos

      if (not has_edge_bounce)
        offset = XY( offset.x, offset.y.or_larger( max_offset ).or_smaller( 0 ) )
      endIf

    method clear->this
      prior.clear
      layout.clear
      offset = XY(0,0)
      return this

    method dispatch_draw
      if (subcomponents)
        Display.push_clip( bounds.transformed(Display.render_target.view_transform) )
        local drawn_any = false
        forEach (component in subcomponents)
          if (component.bounds.intersects(bounds))
            component.handle_draw
            drawn_any = true
          elseIf (drawn_any)
            if (component.size.x and component.size.y)
              # Only quit non-zero-sized components
              escapeForEach
            endIf
          endIf
        endForEach
        Display.pop_clip
      endIf

    method get( index:Int32 )->$ItemType
      return subcomponents[ index ]->(as $ItemType)

    method handle( e:PointerEvent )
      GGComponentManager.pointer_position = e.position
      if (e.is_press)
        if (not is_dragging and contains(e))
          acceleration = 0.10   # halt any scrolling going on
          is_pressed = true
          drag_time.restart
          cur_pos = e.position
          drag_start = cur_pos
          GGComponentManager.pointer_focus = this
        endIf
      elseIf (e.is_move)
        if (is_dragging)
          adjust_offset( e.position )
        elseIf (is_pressed)
          if (e.position.distance_to(cur_pos) >= Display.size.magnitude * 0.01)
            is_dragging = true
            drag_deltas.clear
            cur_pos = e.position
          endIf
        else
          # Pass move event to appropriate list item
          local component = find( e )
          if (component) component.handle( e )
        endIf
      elseIf (e.is_release)
        is_pressed = false
        GGComponentManager.pointer_focus = null
        if (is_dragging)
          is_dragging = false
          acceleration = 0.10
          if (drag_deltas.count)
            local sum = 0.0
            sum += (forEach in drag_deltas)
            local avg = sum / drag_deltas.count
            if (avg.abs >= 5)
              acceleration = 0.96
              velocity += XY( 0, avg )
            endIf
          endIf
        else
          acceleration = 0.10
          if (velocity.abs.max < 1)
            # We pressed and released list without dragging it.  Generate a press/release event
            # for the appropriate list item.
            local component = find( e )
            if (component)
              component.handle( PointerEvent(PointerEvent.PRESS,e.position,XY(0,0),e.index) ) # Press
              component.handle( e ) # Release
            else
              on_select_background( e.position )
            endIf
          endIf
        endIf
      endIf

    method on_update
      local any_movement = false
      if (is_dragging)
        # Save 1/10th second of drag deltas
        drag_deltas.add( drag_delta )
        if (drag_deltas.count > 10) drag_deltas.remove_first
        any_movement = true
      endIf

      if (not velocity.is_zero)
        offset += velocity
        velocity *= acceleration
        if (velocity.abs.max < 0.1) velocity = XY(0,0)

        if (not has_edge_bounce)
          offset = XY( offset.x, offset.y.or_larger( max_offset ).or_smaller( 0 ) )
        endIf
        any_movement = true
      endIf

      if (not is_dragging)
        if (offset.y > 0)
          offset   *= XY(1,0.8)
          acceleration = 0.50
          any_movement = true
        elseIf (offset.y < max_offset)
          offset = XY( offset.x, max_offset + (offset.y - max_offset) * 0.8 )
          acceleration = 0.50
          any_movement = true
        endIf
      endIf

      if (any_movement)
        update_subcomponent_layout
      endIf

      if (subcomponents)
        (forEach in subcomponents).update
      endIf

    method on_select_background( pos:XY )
      if (on_select_background_callback) on_select_background_callback( this, pos )

    method on_select_background( on_select_background_callback )->this
      return this

    method update_layout( new_bounds:Box )
      if (validated_bounds.exists and validated_bounds.value == new_bounds) return

      # Use 'layout' as a work object to figure out the total content size
      if (subcomponents)
        layout.clear
        layout.invalidate
        layout.add( forEach in subcomponents )
        layout.add( GGFiller.v )
        layout.update_layout( new_bounds )
        content_size = layout.size.y
        invalidate
      else
        content_size = 0
      endIf

      prior.update_layout( new_bounds )

    method update_subcomponent_layout
      content_size = 0

      if (subcomponents)
        local pos = position + offset
        forEach (component in subcomponents)
          component.update_layout( Box(pos,component.size) )
          pos += component.size.yv; content_size += component.size.y
        endForEach
      endIf

      max_offset = -((content_size - size.y).or_larger( 0 ))

endClass
