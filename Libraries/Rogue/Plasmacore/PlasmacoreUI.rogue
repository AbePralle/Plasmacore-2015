module Plasmacore
  uses UI
  uses PlasmacoreUITheme [export]

class PlasmacoreUI : UI
  METHODS
    method init
      prior.init( PlasmacoreUITheme )

    method init( theme:UITheme )
      prior.init( theme )

    method broadcast_message( message:Value )
      Display.screen_state.broadcast_message( message )

    method default_theme->UITheme
      return PlasmacoreUITheme

    method update
      prior.update
      request_redraw

    method set_clip( @clip )
      Display.clip = clip
endClass

augment Font
  PROPERTIES
    ui_font : Object
endAugment

augment UIFont
  METHODS
    method color->Color
      throw UnsupportedOperationError()

    method set_color( new_color:Color )
      throw UnsupportedOperationError()
endAugment

class PlasmacoreUIFont : UIFont
  GLOBAL METHODS
    method create( font:Font )->PlasmacoreUIFont
      if (not font.ui_font) PlasmacoreUIFont( font, &link=true )
      return font.ui_font->(as PlasmacoreUIFont)

  PROPERTIES
    font : Font

  METHODS
    method init( name:String )
      prior.init( name.before_last(".png",&ignore_case) )
      if (not name.ends_with(".png",&ignore_case)) name += ".png"
      init( Font(name).[ snap=true, anchor=Anchor.TOP_LEFT ], &link=true )

    method init( @font, link:Logical )
      font.ui_font = this

    method cloned->PlasmacoreUIFont
      return PlasmacoreUIFont( font.cloned )

    method color->Color
      return font.color

    method draw( text:String, position:XY )
      temporarily font.anchor = Anchor.TOP_LEFT
        font.draw( text, position )
      endTemporarily

    method height->Real64
      return font.height

    method measure( ch:Character )->XY
      return font.measure( ch )

    method measure( text:String, i1=0:Int32, count=-1:Int32 )->XY
      if (count == -1) count = text.count
      return font.measure( text, i1, count )

    method reload
      font.reload

    method set_color( new_color:Color )
      font.color = new_color
endClass

augment UIComponent
  METHODS
    method color->Color
      return UIAttributes.color( this )

    method set_color( value:Color )
      UIAttributes.set_color( this, value )

    method set_font( new_font:Font )
      set_font( PlasmacoreUIFont(new_font) )
endAugment

augment UIContent
  METHODS
    method set_color( new_color:Color )
      flush
      if (new_color != cur_group.color) begin_new_group
      cur_group.color = new_color
endAugment

augment UILabel
  METHODS
    method init( text:String, font:Font )
      init( text, PlasmacoreUIFont(font) )
endAugment

augment UIText
  METHODS
    method init( text:String, font:Font )
      init( text, PlasmacoreUIFont(font) )
endAugment

augment UIWidget
  METHODS
    method init( text:String, font:Font )
      init( text, PlasmacoreUIFont(font) )
endAugment

augment UIAttributes
  METHODS
    method color( component:UIComponent )->Color
      if (component.attributes)
        local color = component.attributes.color
        if (color) return color.value
      endIf
      if (component.parent) return component.parent.color
      return Color.WHITE

    method set_color( component:UIComponent, value:Color )
      if (component.attributes) component.attributes.set_color( value )
      else                      component.attributes = UIColorAttribute( value )
endAugment

augment UIAttribute
  METHODS
    method color->Color?
      if (next) return next.color
      return null

    method set_color( value:Color )
      if (next) next.set_color( value )
      else      next = UIColorAttribute( value )
endAugment

class UIColorAttribute( value:Color ) : UIAttribute
  METHODS
    method color->Color?
      return value

    method set_color( value )
endClass

class UIImage : UIComponent
  PROPERTIES
    image : Image

  METHODS
    method init( image )

    method on_draw
      image.size = size
      image.anchor = Anchor.TOP_LEFT
      image.draw( display_position )
endClass

