uses Graphics

routine launch_data_compiler( platform:String )
  try
    local config_file = File( "Assets/Data/DataConfig.txt" )
    if (not config_file.exists)
      config_file.parent.create_folder
      local writer = PrintWriter(config_file.writer)
      writer.println @|# Default data config file - customize as desired.
                      |#
                      |# PLATFORMS
                      |#   [Global]  - Use this category for attributes and settings
                      |#               that apply to all platforms.
                      |#   [Default] - Used when specific platform isn't defined, e.g.
                      |#               if [iOS] isn't defined then [Default] is used.
                      |#   [iOS]     - iOS-specific attributes, settings, and groups.
                      |#   [Android] - Android-specific attributes, settings, and groups.
                      |#   [macOS]   - Mac-specific attributes, settings, and groups.
                      |#   [Web]     - Web-specific attributes, settings, and groups.
                      |#   [Linux]   - Linux-specific attributes, settings, and groups.
                      |#
                      |# COMMANDS
                      |#   include <file or pattern>            # Include file in build
                      |#
                      |
                      |[Default]
                      |include **
      writer.close
    endIf

    DataCompiler( config_file, platform )

  catch (err:DataCompileError)
    if (System.env["IDE"])
      Console.error.println "$:$: error:$" (File(err.filepath).abs,err.line,err.message)
    else
      println err
    endIf
    System.exit 1

  catch (err:Error)
    if (System.env["IDE"])
      Console.error.println "DataCompiler:0: error:$" (err.message)
    else
      println err
    endIf
    System.exit 1

  endTry
endRoutine

class DataCompileError : Error
  PROPERTIES
    cmd      : DataCommand
    filepath : String
    line     : Int32

  METHODS
    method init( cmd, message )
      filepath = cmd.src_filepath
      line = cmd.src_line

    method init( message )
      filepath = "DataCompiler"

    method to->String
      local builder = String()

      local w = Console.width.or_smaller( 79 )
      local bar = "=" * w
      builder.println bar
      if (cmd)
        builder.println( (''DATA COMPILE ERROR in "$" line $'' (filepath,line)).word_wrapped(w) )
      else
        builder.println "DATA COMPILE ERROR"
      endIf
      builder.println
      builder.println message.word_wrapped( w )
      builder.println bar
      return builder
endClass


class DataCompiler
  PROPERTIES
    file             : File
    platform         : String
    commands         = [String:DataCommand[]]
    attributes       = @[]
    settings         = @{}
    even_odd         = true
    files_written    : Int32
    all_data       : String[]
    included_data  = Set<<String>>()

  METHODS
    method init( file, platform )
      println "Compiling $ data..." (platform)

      organize_commands
      execute_global_commands
      execute_platform_commands

      # Automatically exclude DataConfig.txt
      included_data.remove( "Assets/Data/DataConfig.txt" )

      local dest_folder = asset_folder( platform, "Data/" )
      local unused_files = File( dest_folder ).listing( "**", &omit_path, &files )

      if (not File(dest_folder).is_folder) File( dest_folder ).create_folder
      forEach (filepath in included_data)
        if (not File(filepath).is_folder)
          local attr = data_attributes( filepath )
          local relative_filename = filepath.after_first( "/Data/" )
          unused_files.remove( relative_filename )
          copy_data( filepath, dest_folder+relative_filename, attr )
        endIf
      endForEach

      if (not unused_files.is_empty)
        files_written = true
        forEach (filename in unused_files)
          local filepath = dest_folder + filename
          println "  Deleting unused " + filepath
          File( filepath ).delete
        endForEach
      endIf

      if (not files_written)
        println "Data up to date."
      endIf

    method copy_data( from_filepath:String, to_filepath:String, attr:Value )
      if (File(to_filepath) != File(from_filepath))
        File(to_filepath).parent.create_folder

        print   "  Writing "
        println to_filepath
        ++files_written

        File( from_filepath ).copy_to( to_filepath )
      endIf

    method execute_global_commands
      if (not commands.contains("Global")) return
      (forEach in commands//Global).execute

    method execute_platform_commands
      local working_platform = which{ commands.contains(platform):platform || "Default" }
      if (commands.contains(working_platform))
        (forEach in commands[working_platform]).execute
      else
        if (platform != "Default")
          println "DATA COMPILER WARNING: No configuration for platforms $ or Default in Assets/Data/DataConfig.txt." (platform)
        else
          println "DATA COMPILER WARNING: No configuration for platform Default in Assets/Data/DataConfig.txt."
        endIf
      endIf

    method organize_commands
      local category = "Global"

      forEach (line at index in CommentStripper().process(file.load_as_string))
        line = line.trimmed
        if (line.count == 0) nextIteration
        if (line.begins_with('['))
          local after = line.after_first(']')
          if (after.count) throw DataCompileError( DataCommand(this,file.filepath,index+1,line), "Syntax error after ']'." )
          category = line.after_first( '[' ).before_first( ']' ).trimmed
        else
          ensure<<commands[category]>>
          commands[ category ].add( DataCommand(this,file.filepath,index+1,line) )
        endIf
      endForEach

    method data_attributes( filepath:String )->Value
      local result = @{}

      forEach (def in attributes)
        if (FilePattern(def//pattern->String).matches(filepath))
          forEach (attr in def//attributes)
            result[ attr//name ] = attr//value
          endForEach
        endIf
      endForEach

      return result

endClass


class DataCommand
  PROPERTIES
    dcom         : DataCompiler
    src_filepath : String
    src_line     : Int32
    content      : String
    reader       : Scanner
    buffer       = String()

  METHODS
    method init( dcom, src_filepath, src_line, content )
      reader = Scanner( content )

    method collect_files( filepath:String )->String[]
      local pattern = filepath
      if (File(filepath).exists)
        pattern = "**"
      else
        while (filepath.contains('*') or filepath.contains('?')) filepath = File( filepath ).folder
        if (not File(filepath).exists) throw error( ''No such file or folder "$".'' (filepath) )
      endIf

      local file_list = String[]

      if (File(filepath).is_folder)
        forEach (f in File(filepath).listing("**",&ignore_hidden))
          if (FilePattern(pattern).matches(f)) file_list.add( f )
        endForEach
      else
        file_list.add( filepath )
      endIf

      local filtered_list = String[]
      forEach (f in file_list)
        if (not File(f).is_folder) filtered_list.add( f )
      endForEach

      return filtered_list

    method consume( ch:Character )->Logical
      return (reader.consume(ch))

    method consume( text:String )->Logical
      return (reader.consume(text))

    method consume_whitespace->Logical
      local found_any = false

      while (reader.consume_spaces or reader.consume('\t'))
        found_any = true
      endWhile

      return found_any

    method error( message:String )->DataCompileError
      return DataCompileError( this, message )

    method execute
      if (consume("@"))
        local pattern = parse_string( "Filename or file pattern expected after \"@\"." )
        pattern = "Assets/Data/" + pattern
        local info = @{ pattern:pattern, attributes:[] }
        while (has_another)
          local name = parse_string( "Attribute or [end of line] expected." )
          consume_whitespace
          if (consume(':'))
            local value = parse_string( "Value expected." )
            local attribute = @{ name:name }
            attribute//value = value
            info//attributes.add( attribute )
          else
            local attribute = @{ name:name }
            info//attributes.add( attribute )
          endIf
        endWhile
        dcom.attributes.add( info )
        return
      endIf

      local cmd = parse_string( "Command expected." )
      which (cmd)
        case "include"
          include_data

        case "set"
          local setting = parse_name_value
          dcom.settings[ setting//name ] = setting//value

        others
          throw error( ''Syntax error - unknown command "$".'' (cmd) )
      endWhich

    method include_data
      if (not dcom.all_data) dcom.all_data = File( "Assets/Data" ).listing( "**", &ignore_hidden )

      local pattern = parse_string( "Folder or file pattern expected." )
      if (pattern == ".")
        include_data( "Assets/Data/*" )
      else
        include_data( "Assets/Data/" + pattern )
      endIf

    method include_data( pattern:String )
      if (pattern.contains('*') or pattern.contains('?'))
        forEach (filepath in dcom.all_data)
          if (FilePattern(pattern).matches(filepath))
            dcom.included_data.add( filepath )
          endIf
        endForEach
      else
        dcom.included_data.add( pattern )
      endIf

    method has_another->Logical
      consume_whitespace
      return (reader.has_another)

    method must_consume( ch:Character )->Logical
      if (consume(ch)) return true

      if (reader.has_another)
        throw error( ''Syntax error - expected "$", found "$".'' (ch,reader.peek) )
      else
        throw error( ''Syntax error - expected "$", found [end of line].'' (ch) )
      endIf

    method must_consume( text:String )->Logical
      if (consume(text)) return true

      if (reader.has_another)
        throw error( ''Syntax error - expected "$", found "$".'' (text,reader.peek) )
      else
        throw error( ''Syntax error - expected "$", found [end of line].'' (text) )
      endIf

    method parse_args->Value
      local args = @{}
      while (has_another)
        local arg = parse_name_value
        if (arg//value) args[ arg//name ]         = arg//value
        else            args[ arg//name->String ] = true
      endWhile
      return args

    method parse_name_value->Value
      local name = parse_string( "Identifier or [end of line] expected." )
      local name_value = @{ name:name }
      consume_whitespace
      if (consume(':'))
        name_value//value = parse_string( "Value expected." )
      endIf
      return name_value

    method parse_string( expected:String )->String
      if (not has_another) throw error( expected )
      buffer.clear
      local ch = reader.peek
      if (ch == '"' or ch == '\'')
        # Quote-delimited
        local quote_type = reader.read
        while (reader.has_another)
          ch = reader.read
          which (ch)
            case quote_type: return buffer.cloned
            case '\\'
              if (reader.has_another) buffer.print( reader.read )
            others
              buffer.print( ch )
          endWhich
        endWhile
        throw error( "String is missing closing ($)." (quote_type) )
      else
        while (reader.has_another)
          ch = reader.peek
          which (ch)
            case ' ', ':', ','
              escapeWhile
            others
              buffer.print reader.read
          endWhich
        endWhile
        if (buffer.count == 0) throw error( expected )
      endIf
      return buffer.cloned

    method require_arg( args:Value, name:String  )
      if (not args.contains(name)) throw error( "Missing required argument '$'." (name) )

    method to->String
      return content
endClass

